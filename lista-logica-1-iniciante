# Lista de Exerc√≠cios de L√≥gica de Programa√ß√£o em Dart

Esta lista cont√©m 50 exerc√≠cios pr√°ticos para quem est√° aprendendo Dart, focados em l√≥gica de programa√ß√£o. Os exerc√≠cios est√£o organizados em 10 t√≥picos fundamentais e evoluem gradualmente do n√≠vel iniciante ao intermedi√°rio.

## Sobre a dificuldade

- üü¢ **Iniciante:** Exerc√≠cios b√°sicos para entender conceitos fundamentais, como vari√°veis, tipos de dados, entrada e sa√≠da, e estruturas simples.
- üü° **Iniciante/Intermedi√°rio:** Exerc√≠cios que combinam conceitos, incluindo manipula√ß√£o de listas, fun√ß√µes com par√¢metros e retorno, e la√ßos condicionais.
- üü† **Intermedi√°rio:** Exerc√≠cios que exigem racioc√≠nio mais elaborado, envolvendo estruturas aninhadas, manipula√ß√£o de cole√ß√µes, e l√≥gica de repeti√ß√£o e decis√£o mais complexa.

## Objetivo

Estes exerc√≠cios t√™m como objetivo desenvolver seu racioc√≠nio l√≥gico e familiaridade com a sintaxe e recursos do Dart, preparando voc√™ para projetos mais avan√ßados e desafios reais de programa√ß√£o.

---

## T√≥picos e Exerc√≠cios

---

### 1. Vari√°veis e Tipos de Dados

1. **Crie e imprima suas informa√ß√µes**  
   Explica√ß√£o: Crie vari√°veis para seu nome (texto), idade (inteiro), altura (n√∫mero com v√≠rgula) e se voc√™ √© estudante (verdadeiro ou falso). Imprima esses dados no console.  
   Dica: Use `String`, `int`, `double` e `bool`.

2. **Soma de dois inteiros**  
   Explica√ß√£o: Crie duas vari√°veis inteiras, some os valores e mostre o resultado.  
   Dica: Crie uma terceira vari√°vel para a soma.

3. **Converta n√∫mero para texto**  
   Explica√ß√£o: Crie uma vari√°vel `int`, converta para string e imprima.  
   Dica: Use `.toString()`.

4. **Trabalhe com `var` e `dynamic`**  
   Explica√ß√£o: Crie uma vari√°vel com `var` e outra com `dynamic`. Tente mudar os valores depois da declara√ß√£o e observe o comportamento.  
   Dica: `dynamic` permite mudar o tipo, `var` n√£o.

5. **Misture tipos diferentes**  
   Explica√ß√£o: Crie um `int` e um `double`, some-os e imprima o tipo da vari√°vel resultado.  
   Dica: Use `.runtimeType` para descobrir o tipo.

---

### 2. Entrada e Sa√≠da de Dados

1. **Pe√ßa o nome do usu√°rio**  
   Explica√ß√£o: Leia o nome do usu√°rio e mostre uma mensagem de boas-vindas.  
   Dica: Use `stdin.readLineSync()` e `print()`.

2. **Some dois n√∫meros digitados**  
   Explica√ß√£o: Leia dois n√∫meros do usu√°rio e mostre a soma.  
   Dica: Converta as entradas para `int` ou `double`.

3. **Calcule a m√©dia de tr√™s notas**  
   Explica√ß√£o: Leia tr√™s notas (decimais), calcule e mostre a m√©dia com duas casas decimais.  
   Dica: Use `double.parse()` e fa√ßa `(n1 + n2 + n3) / 3`.

4. **Mostre tipo e valor digitado**  
   Explica√ß√£o: Leia qualquer valor e mostre o valor e o tipo.  
   Dica: Use `.runtimeType`.

5. **Convers√£o entre tipos**  
   Explica√ß√£o: Leia um n√∫mero como texto, converta para inteiro e mostre o dobro.  
   Dica: Use `int.parse()`.

---

### 3. Operadores Aritm√©ticos e Relacionais

1. **Opera√ß√µes b√°sicas com dois n√∫meros**  
   Explica√ß√£o: Declare dois n√∫meros e calcule soma, subtra√ß√£o, multiplica√ß√£o e divis√£o.  
   Dica: Use `+`, `-`, `*` e `/`.

2. **Verifique se dois valores s√£o iguais**  
   Explica√ß√£o: Leia dois n√∫meros e informe se s√£o iguais ou diferentes.  
   Dica: Use `==` e `!=`.

3. **Descubra o maior entre dois n√∫meros**  
   Explica√ß√£o: Leia dois n√∫meros e mostre o maior.  
   Dica: Use `if` e operadores `>` e `<`.

4. **Par ou √≠mpar**  
   Explica√ß√£o: Leia um n√∫mero e informe se √© par ou √≠mpar.  
   Dica: Use `%` para verificar o resto da divis√£o por 2.

5. **Compare tr√™s n√∫meros**  
   Explica√ß√£o: Leia tr√™s n√∫meros e mostre o maior e o menor.  
   Dica: Combine v√°rios `if` com `&&`.

---

### 4. Condicionais (`if`, `else`, `else if`)

1. **Verifique se √© maior de idade**  
   Explica√ß√£o: Leia a idade e diga se √© maior ou menor de idade (>=18).  
   Dica: Use `if (idade >= 18)`.

2. **N√∫mero positivo, negativo ou zero**  
   Explica√ß√£o: Leia um n√∫mero e diga se √© positivo, negativo ou zero.  
   Dica: Use `if`, `else if` e `else`.

3. **Nota e conceito**  
   Explica√ß√£o: Leia uma nota de 0 a 10 e mostre conceito A, B, C ou D conforme intervalo.  
   Dica: Use `if` e `else if` para verificar intervalos.

4. **Login simples**  
   Explica√ß√£o: Leia usu√°rio e senha, s√≥ permita acesso se forem ‚Äúadmin‚Äù e ‚Äú1234‚Äù.  
   Dica: Use `==` para comparar strings e `&&` para combinar.

5. **Calculadora simples**  
   Explica√ß√£o: Leia dois n√∫meros e um operador (+, -, *, /) e calcule o resultado.  
   Dica: Use v√°rios `if` para cada operador.

---

### 5. La√ßos de Repeti√ß√£o (for, while, do...while)

1. **Contar de 1 a 10**  
   Explica√ß√£o: Use um `for` para imprimir n√∫meros de 1 a 10.  
   Dica: `for (int i = 1; i <= 10; i++)`.

2. **Somar de 1 at√© n√∫mero informado**  
   Explica√ß√£o: Leia um n√∫mero e use `while` para somar de 1 at√© esse n√∫mero.  
   Dica: Use um contador e uma vari√°vel acumuladora.

3. **Contagem regressiva com `do...while`**  
   Explica√ß√£o: Leia um n√∫mero e fa√ßa contagem regressiva at√© 1.  
   Dica: `do { ... } while (condi√ß√£o)`.

4. **Tabuada de multiplica√ß√£o**  
   Explica√ß√£o: Leia um n√∫mero e mostre sua tabuada de 1 a 10.  
   Dica: Use `for` e multiplica√ß√£o.

5. **Senha at√© acertar**  
   Explica√ß√£o: Leia senhas do usu√°rio at√© que a senha correta seja digitada.  
   Dica: Use `while` para repetir.

---

### 6. Listas e Cole√ß√µes Simples

1. **Crie uma lista de frutas**  
   Explica√ß√£o: Crie uma lista com 3 frutas e imprima.  
   Dica: Use `List<String>`.

2. **Acesse o primeiro e √∫ltimo item**  
   Explica√ß√£o: Imprima o primeiro e √∫ltimo elemento da lista.  
   Dica: Use √≠ndices.

3. **Adicione um item na lista**  
   Explica√ß√£o: Adicione uma fruta nova ao final e imprima.  
   Dica: Use `.add()`.

4. **Remova um item da lista**  
   Explica√ß√£o: Remova uma fruta pelo nome e mostre a lista.  
   Dica: Use `.remove()`.

5. **Percorra a lista e imprima cada fruta**  
   Explica√ß√£o: Use um `for` para imprimir cada fruta em linha separada.  
   Dica: Use `for (var fruta in lista)`.

---

### 7. Fun√ß√µes (Definir e Chamar)

1. **Fun√ß√£o que imprime mensagem**  
   Explica√ß√£o: Crie uma fun√ß√£o que imprime ‚ÄúOl√°, mundo!‚Äù e chame no `main`.  
   Dica: `void nomeDaFuncao() { ... }`.

2. **Fun√ß√£o que recebe nome e imprime sauda√ß√£o**  
   Explica√ß√£o: Fun√ß√£o que recebe `String` e imprime ‚ÄúOl√°, nome!‚Äù.  
   Dica: Use par√¢metro e interpola√ß√£o.

3. **Fun√ß√£o que soma dois n√∫meros**  
   Explica√ß√£o: Fun√ß√£o que recebe dois n√∫meros e retorna a soma.  
   Dica: Use `return`.

4. **Fun√ß√£o que verifica se n√∫mero √© par**  
   Explica√ß√£o: Fun√ß√£o que retorna `true` se o n√∫mero for par, `false` se √≠mpar.  
   Dica: Use operador `%`.

5. **Fun√ß√£o que calcula m√©dia de uma lista**  
   Explica√ß√£o: Fun√ß√£o que recebe lista de n√∫meros e retorna m√©dia.  
   Dica: Use la√ßo para somar e divida pela quantidade.

---

### 8. La√ßos com Listas

1. **Imprima todos os itens da lista**  
   Explica√ß√£o: Dada uma lista de nomes, imprima cada um com `for`.  
   Dica: Use `for (var item in lista)`.

2. **Some todos os n√∫meros da lista**  
   Explica√ß√£o: Calcule soma dos n√∫meros de uma lista.  
   Dica: Use vari√°vel acumuladora.

3. **Conte quantos n√∫meros s√£o pares**  
   Explica√ß√£o: Conte elementos pares em uma lista.  
   Dica: Use `%` dentro do la√ßo.

4. **Crie nova lista com n√∫meros dobrados**  
   Explica√ß√£o: Dada uma lista, crie outra com valores multiplicados por 2.  
   Dica: Use la√ßo para popular nova lista.

5. **Remova n√∫meros √≠mpares da lista original**  
   Explica√ß√£o: Remova todos os n√∫meros √≠mpares da lista.  
   Dica: Use `.remove()` ou crie nova lista s√≥ com pares.

---

### 9. Switch / Case

1. **Nome do dia da semana**  
   Explica√ß√£o: Use n√∫mero de 1 a 7 para mostrar nome do dia.  
   Dica: Use `switch` e `case`.

2. **Classifique uma fruta pelo c√≥digo**  
   Explica√ß√£o: Use c√≥digo para mostrar nome da fruta.  
   Dica: Use `switch`.

3. **Verifique operador aritm√©tico**  
   Explica√ß√£o: Pe√ßa operador e mostre qual foi escolhido.  
   Dica: `switch` com `String`.

4. **Calculadora simples com switch**  
   Explica√ß√£o: Use switch para calcular opera√ß√£o entre dois n√∫meros.  
   Dica: `switch` para cada operador.

5. **M√™s do ano pelo n√∫mero**  
   Explica√ß√£o: Mostre nome do m√™s pelo n√∫mero, use `default` para inv√°lidos.  
   Dica: Use `switch`.

---

### 10. Boas Pr√°ticas de Identa√ß√£o e Coment√°rios

1. **Identar um c√≥digo simples**  
   Explica√ß√£o: Escreva um c√≥digo com identa√ß√£o correta.  
   Dica: Use 2 ou 4 espa√ßos por n√≠vel.

2. **Comente seu c√≥digo**  
   Explica√ß√£o: Comente as linhas de um c√≥digo simples.  
   Dica: Use `//` para coment√°rios de linha.

3. **Use coment√°rios em bloco**  
   Explica√ß√£o: Comente fun√ß√µes usando `/* ... */`.  
   Dica: Explica√ß√µes maiores ficam melhor assim.

4. **Refatore c√≥digo mal indentado**  
   Explica√ß√£o: Organize um c√≥digo sem indenta√ß√£o.  
   Dica: Pense em blocos de c√≥digo para identar.

5. **Explique c√≥digo complexo com coment√°rios**  
   Explica√ß√£o: Fa√ßa um c√≥digo com la√ßo e condicional, comentando o passo a passo.  
   Dica: Comente partes importantes para clareza.

---

**Boa pr√°tica e bons estudos! üöÄ**

---

Quer que eu te envie o arquivo pronto para download?

# Exerc√≠cios de L√≥gica em Dart - N√≠vel Iniciante a Intermedi√°rio (Null Safety e Conceitos Essenciais)

Esta lista cont√©m 50 exerc√≠cios focados em fundamentos importantes do Dart, como null safety, tratamento b√°sico de erros, cole√ß√µes, fun√ß√µes, e conceitos iniciais de programa√ß√£o orientada a objetos e ass√≠ncrona.

---

## 1. Null Safety B√°sico

1. Declare uma vari√°vel `String?` que pode ser nula e imprima seu valor usando o operador seguro `?.`.  
   Dica: `print(nome?.length);`

2. Crie uma vari√°vel que pode ser nula e use `??` para definir um valor padr√£o ao imprimir.  
   Dica: `var texto = textoNulo ?? 'valor padr√£o';`

3. Experimente usar o operador `!` para for√ßar o acesso a um valor nulo (veja o erro que ocorre).  
   Dica: Use com cuidado!

4. Crie uma fun√ß√£o que recebe um `int?` e retorna 0 se o valor for nulo.  
   Dica: Use o operador tern√°rio ou `??`.

5. Declare uma vari√°vel `late int` e inicialize depois antes de usar.  
   Dica: Tente usar antes de inicializar e veja o erro.

---

## 2. Tratamento B√°sico de Erros

6. Tente converter uma string para n√∫mero dentro de um bloco `try/catch`.  
   Dica: Capture exce√ß√£o para entrada inv√°lida.

7. Capture um erro espec√≠fico usando `on FormatException`.  
   Dica: Diferencie erros para tratamento espec√≠fico.

8. Use `finally` para imprimir uma mensagem ap√≥s `try/catch`.  
   Dica: `finally` executa sempre.

9. Crie uma fun√ß√£o que lan√ßa uma exce√ß√£o quando recebe n√∫mero negativo.  
   Dica: Use `throw Exception('Erro')`.

10. Capture e imprima uma exce√ß√£o personalizada.  
    Dica: Crie uma classe que estenda `Exception`.

---

## 3. Cole√ß√µes Simples

11. Crie uma lista de n√∫meros e imprima todos os elementos.  
    Dica: Use `for (var n in lista)`.

12. Some os valores de uma lista de inteiros.  
    Dica: Use um acumulador.

13. Filtre valores maiores que 10 em uma lista.  
    Dica: Use `.where()`.

14. Crie um Map com pares chave-valor e imprima todos.  
    Dica: Use `.forEach()`.

15. Remova um elemento espec√≠fico da lista.  
    Dica: Use `.remove()`.

---

## 4. Fun√ß√µes B√°sicas

16. Crie uma fun√ß√£o que imprime "Ol√°, Dart!" e chame ela.  
    Dica: Use `void funcao() { ... }`.

17. Crie uma fun√ß√£o que recebe um nome e imprime uma sauda√ß√£o.  
    Dica: Use par√¢metro de fun√ß√£o.

18. Crie uma fun√ß√£o que soma dois n√∫meros e retorna o resultado.  
    Dica: Use `return`.

19. Crie uma fun√ß√£o que verifica se um n√∫mero √© par e retorna `true` ou `false`.  
    Dica: Use `% 2`.

20. Crie uma fun√ß√£o que recebe uma lista e retorna a soma dos valores.  
    Dica: Use la√ßo para somar.

---

## 5. Orienta√ß√£o a Objetos B√°sica

21. Crie uma classe `Pessoa` com nome e idade e um m√©todo para imprimir os dados.  
    Dica: Use `class` e `void metodo()`.

22. Instancie objetos da classe `Pessoa` e imprima os dados.  
    Dica: Use `Pessoa p = Pessoa(...)`.

23. Use propriedades `String?` que podem ser nulas e trate o acesso.  
    Dica: Use `?` ao acessar.

24. Crie um construtor para a classe `Pessoa`.  
    Dica: Use `Pessoa(this.nome, this.idade);`.

25. Crie uma subclasse que estende `Pessoa` e adicione uma propriedade extra.  
    Dica: Use `extends`.

---

## 6. Programa√ß√£o Ass√≠ncrona B√°sica

26. Crie uma fun√ß√£o `Future` que retorna um valor ap√≥s 2 segundos.  
    Dica: Use `Future.delayed`.

27. Use `async/await` para chamar a fun√ß√£o e imprimir o resultado.  
    Dica: Use `await`.

28. Fa√ßa tratamento de erro em fun√ß√£o ass√≠ncrona com `try/catch`.  
    Dica: Use `try/catch` dentro de `async`.

29. Combine duas fun√ß√µes `Future` com `Future.wait`.  
    Dica: Aguarde ambas completarem.

30. Use um `Stream` para emitir n√∫meros de 1 a 5 com delay.  
    Dica: Use `Stream.periodic`.

---

## 7. Operadores e Boas Pr√°ticas

31. Use operador tern√°rio para verificar e imprimir se um n√∫mero √© positivo.  
    Dica: `condicao ? valor1 : valor2`.

32. Use operador `??` para valores padr√£o em vari√°veis que podem ser nulas.  
    Dica: Exemplo `var x = nulo ?? 0`.

33. Use o operador spread `...` para unir duas listas.  
    Dica: `var lista3 = [...lista1, ...lista2];`

34. Use `if` dentro de lista para adicionar elementos condicionalmente.  
    Dica: `[1, 2, if(cond) 3]`

35. Use coment√°rios para documentar uma fun√ß√£o simples.  
    Dica: Use `///` para documenta√ß√£o.

---

## 8. Manipula√ß√£o Simples de Strings

36. Fa√ßa uma interpola√ß√£o simples de strings com vari√°veis.  
    Dica: Use `"Ol√°, $nome"`.

37. Concatene duas strings usando `+`.  
    Dica: `"Dart " + "√© legal"`.

38. Use `.toUpperCase()` e `.toLowerCase()` para alterar texto.  
    Dica: `"texto".toUpperCase()`.

39. Extraia uma substring usando `.substring()`.  
    Dica: `"abcdef".substring(1,4)`.

40. Separe uma string em lista usando `.split()`.  
    Dica: `"a,b,c".split(",")`.

---

## 9. Listas e Mapas com Null Safety

41. Crie uma lista que pode ser nula e trate ao imprimir.  
    Dica: Use `List<String>? lista;` e `lista?.forEach(...)`.

42. Adicione elementos a uma lista que pode ser nula (tratando o null).  
    Dica: Inicialize se for nula.

43. Crie um Map que pode conter valores nulos e filtre os n√£o nulos.  
    Dica: Use `.removeWhere()`.

44. Atualize valores em Map verificando se a chave existe.  
    Dica: Use `map.containsKey()`.

45. Imprima valores de Map usando null safety no acesso.  
    Dica: `map['chave'] ?? 'default'`.

---

## 10. Fun√ß√µes e Null Safety

46. Crie fun√ß√£o que recebe par√¢metro nulo e retorna valor padr√£o.  
    Dica: Use `??`.

47. Fun√ß√£o com par√¢metro nomeado opcional com valor padr√£o.  
    Dica: `void f({String nome = "usu√°rio"})`.

48. Fun√ß√£o que retorna null em algumas condi√ß√µes e use null safety ao consumir.  
    Dica: Use operador `?`.

49. Fun√ß√£o que recebe lista nula e soma valores se n√£o for nula.  
    Dica: Use `lista?.fold(0, ...) ?? 0`.

50. Fun√ß√£o que lan√ßa exce√ß√£o caso par√¢metro seja nulo e trate isso fora da fun√ß√£o.  
    Dica: Use `throw` e `try/catch`.

---

**Boa pr√°tica e bons estudos! üöÄ**
